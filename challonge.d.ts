/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tournaments.json": {
        /** Returns tournaments based on the api_key given */
        get: operations["findTournaments"];
        /** Creates a tournament */
        post: operations["createTournament"];
    };
    "/tournaments/{tournament_id}.json": {
        /** Gets a tournament */
        get: operations["showTournament"];
        /** Updates a tournament */
        put: operations["updateTournament"];
        /** Deletes a tournament */
        delete: operations["deleteTournament"];
    };
    "/tournaments/{tournament_id}/change_state.json": {
        /** Changes a tournament's state */
        put: operations["changeStateTournament"];
    };
    "/tournaments/{tournament_id}/matches.json": {
        /** Returns matches based on the tournament ID given */
        get: operations["findMatches"];
    };
    "/tournaments/{tournament_id}/matches/{match_id}.json": {
        /** Returns a match based on the Match ID given */
        get: operations["showMatch"];
        /** Updates a match with scores */
        put: operations["updateMatch"];
    };
    "/tournaments/{tournament_id}/matches/{match_id}/change_state.json": {
        /** Changes a tournament's state */
        put: operations["changeStateTournament"];
    };
    "/tournaments/{tournament_id}/participants.json": {
        /** Returns participants based on the tournament ID given */
        get: operations["findParticipants"];
        /** Creates a Participant */
        post: operations["createParticipant"];
    };
    "/tournaments/{tournament_id}/participants/{participant_id}.json": {
        /** Show a Participant */
        get: operations["showParticipant"];
        /** Updates a Participant */
        put: operations["updateParticipant"];
        /** Deletes a Participant */
        delete: operations["deleteParticipant"];
    };
    "/tournaments/{tournament_id}/participants/bulk_add.json": {
        /** Bulk Creates a Participant */
        post: operations["bulkCreateParticipant"];
    };
    "/tournaments/{tournament_id}/participants/clear.json": {
        /** Clears all Participants */
        delete: operations["clearAllParticipants"];
    };
    "/tournaments/{tournament_id}/participants/randomize.json": {
        /** Randomizes the Participant Seeding */
        put: operations["randomizeParticipants"];
    };
    "/tournaments/{tournament_id}/matches/{match_id}/attachments.json": {
        /** Returns match attachments based on the api_key, Tournament ID and Match ID given */
        get: operations["findMatchAttachments"];
        /** Creates a Match Attachment */
        post: operations["createMatchAttachments"];
    };
    "/tournaments/{tournament_id}/matches/{match_id/attachments/{attachment_id}.json": {
        /** Deletes a Match Attachment */
        delete: operations["deleteMatchAttachment"];
    };
    "/races.json": {
        get: operations["findRaces"];
        post: operations["createRace"];
    };
    "/races/{race_id}.json": {
        /** Gets a Race */
        get: operations["showRace"];
        /** Updates a Race */
        put: operations["updateRace"];
        /** Deletes a Race */
        delete: operations["deleteRace"];
    };
    "/races/{race_id}/change_state.json": {
        /** Changes a race's state */
        put: operations["changeStateRace"];
    };
    "/races/{race_id}/rounds.json": {
        get: operations["findRounds"];
    };
    "/races/{race_id}/rounds/{round_id}.json": {
        get: operations["showRound"];
        put: operations["updateRound"];
    };
    "/races/{race_id}/rounds/{round_id}/elapsed_times.json": {
        get: operations["findElapsedTime"];
    };
    "/races/{race_id}/rounds/{round_id}/elapsed_times/{id}.json": {
        get: operations["showElapsedTime"];
        put: operations["updateElapsedTime"];
    };
    "/races/{race_id}/rounds/{round_id/elapsed_times/bulk_update.json": {
        post: operations["bulkUpdateElapsedTime"];
    };
    "/communities/{community_identifier}/tournaments.json": {
        /** Returns tournaments based on the api_key given */
        get: operations["findCommunityTournaments"];
        /** Creates a tournament */
        post: operations["createCommunityTournament"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}.json": {
        /** Gets a tournament */
        get: operations["showCommunityTournament"];
        /** Updates a tournament */
        put: operations["updateCommunityTournament"];
        /** Deletes a tournament */
        delete: operations["deleteCommunityTournament"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/change_state.json": {
        /** Changes a tournament's state */
        put: operations["changeStateCommunityTournament"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/matches.json": {
        /** Returns matches based on the tournament ID given */
        get: operations["findCommunityMatches"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/matches/{id}.json": {
        /** Returns a match based on the Match ID given */
        get: operations["showCommunityMatch"];
        /** Updates a match with scores */
        put: operations["updateCommunityMatch"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/change_stage.json": {
        /** Changes a tournament's state */
        put: operations["changeStateTournament"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/participants.json": {
        /** Returns participants based on the tournament ID given */
        get: operations["findCommunityParticipants"];
        /** Creates a Participant */
        post: operations["createCommunityParticipant"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/participants/{participant_id}.json": {
        /** Show a Participant */
        get: operations["showCommunityParticipant"];
        /** Updates a Participant */
        put: operations["updateCommunityParticipant"];
        /** Deletes a Participant */
        delete: operations["deleteCommunityParticipant"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/participants/bulk_add.json": {
        /** Bulk Creates a Participant */
        post: operations["bulkCommunityCreateParticipant"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/participants/clear.json": {
        /** Clears all Participants */
        delete: operations["clearAllCommunityParticipants"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/participants/randomize.json": {
        /** Randomizes the Participant Seeding */
        put: operations["randomizeParticipants"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/match_attachments.json": {
        /** Returns match attachments based on the api_key, Tournament ID and Match ID given */
        get: operations["findCommunityMatchAttachments"];
        /** Creates a Match Attachment */
        post: operations["createCommunityMatchAttachments"];
    };
    "/communities/{community_identifier}/tournaments/{tournament_id}/match_attachments/{id}.json": {
        /** Deletes a Match Attachment */
        delete: operations["deleteCommunityMatchAttachment"];
    };
    "/me.json": {
        /** Returns the user logged in via oAuth, or the API key owner for v1 authentication. */
        get: operations["findUser"];
    };
    "/communities.json": {
        /** Returns administered communities by the user. */
        get: operations["findCommunities"];
    };
}

export interface definitions {
    MatchAttachmentModel: {
        /** @default 332211 */
        id?: string;
        /** @default match_attachment */
        type?: string;
        attributes?: definitions["MatchAttachmentOutput"];
    };
    MatchAttachmentInput: {
        data?: {
            /** @default match_attachment */
            type?: string;
            attributes?: definitions["MatchAttachment"];
        };
    };
    MatchAttachmentOutput: {
        /** @default 332211 */
        id?: number;
        /** @default https://placecage.com/c/200/200 */
        url?: string;
        /** @default There's a fine line between the Method actor and the schizophrenic. */
        description?: string;
        timestamps?: {
            /** @default 2024-08-17 20:46:18 +0000 */
            createdAt?: unknown;
            /** @default 2024-08-17 20:46:18 +0000 */
            updatedAt?: unknown;
        };
    };
    MatchAttachment: {
        /** @default https://placecage.com/c/200/200 */
        url: string;
        /** @default Is the President going to pardon me? */
        description: string;
        asset?: { [key: string]: unknown };
    };
    ParticipantModel: {
        /** @default 76 */
        id?: string;
        /** @default participant */
        type?: string;
        attributes?: definitions["ParticipantOutput"];
    };
    ParticipantOutput: {
        /** @default Player 1's Name */
        name?: string;
        /** @default 1 */
        seed?: number;
        /** @default (If this is a group stage match, there will be a group id here.) */
        group_id?: number;
        /** @default 21 */
        tournament_id?: number;
        /** @default (The participant's associated Challonge username, if present.) */
        username?: string;
        /** @default 1 */
        final_rank?: number;
        states?: {
            /** @default true */
            active?: boolean;
        };
        /** @default Store whatever string you like here */
        misc?: string;
        timestamps?: {
            /** @default 2023-04-21T14:29:06.374Z */
            created_at?: string;
            /** @default 2023-04-21T14:31:45.981Z */
            updated_at?: unknown;
        };
    };
    ParticipantInput: {
        data?: {
            /** @default Participants */
            type?: string;
            attributes?: definitions["Participant"];
        };
    };
    ParticipantBulkInput: {
        data?: {
            /** @default Participants */
            type?: string;
            attributes?: {
                participants?: definitions["Participant"][];
            };
        };
    };
    Participant: {
        /** @default AllBossFights */
        name: string;
        /** @default 1 */
        seed?: number;
        /** @default */
        misc?: string;
        /** @default me@allbossfights.xyz */
        email?: string;
        /** @default AllBossFights */
        username?: string;
    };
    TournamentModel: {
        /** @default 30201 */
        id?: string;
        /** @default tournament */
        type?: string;
        attributes?: definitions["Tournament"];
    };
    TournamentInput: {
        data?: {
            /** @default Tournaments */
            type?: string;
            attributes?: definitions["Tournament"];
        };
    };
    Tournament: {
        /** @default Rainbow Six: Siege Tournament */
        name: string;
        /** @default r6siege_tournament_xx */
        url?: string;
        /**
         * @default single elimination
         * @enum {string}
         */
        tournament_type:
        | "single elimination"
        | "double elimination"
        | "round robin"
        | "swiss"
        | "free for all";
        /** @default Tom Clancy's Rainbow Six Siege */
        game_name?: string;
        /**
         * @description When true, this tournament will be opted out for search engine bots and will be hidden from indexes on Challonge
         * @default false
         */
        private?: boolean;
        /**
         * Format: date_time
         * @description The scheduled start time. Note that Challonge will not automatically start the tournament.
         */
        starts_at?: string;
        description?: string;
        notifications?: {
            /** @default true */
            upon_matches_open?: boolean;
            /** @default true */
            upon_tournament_ends?: boolean;
        };
        match_options?: {
            /**
             * @description For single or double elimination only, consolation matches will be run to break ties up to this final placement.
             * @default 3
             */
            consolation_matches_target_rank?: number;
            /**
             * @description Whether or not to allow match attachment uploads
             * @default false
             */
            accept_attachments?: boolean;
        };
        registration_options?: {
            /**
             * @description Allow registered Challonge users to self-register for this tournament
             * @default false
             */
            open_signup?: boolean;
            /** @description Maximum number of participants allowed in the tournament before the waitlist kicks in */
            signup_cap?: number;
            /** @description Number of minutes for check-in prior to tournament start time. Must be a multiple of 5. */
            check_in_duration?: number;
        };
        seeding_options?: {
            /** @default false */
            hide_seeds?: boolean;
            /**
             * @description When true, seeding rules are ignored and participants are placed in the bracket from top to bottom.
             * @default false
             */
            sequential_pairings?: boolean;
        };
        station_options?: {
            /**
             * @description Automatically assign stations to playable matches (requires one or more stations)
             * @default false
             */
            auto_assign?: boolean;
            /**
             * @description When true, playable matches won't start until they have a station assigned to them
             * @default false
             */
            only_start_matches_with_assigned_stations?: boolean;
        };
        /**
         * @description When true, Challonge's two-stage format is used (group stage + final stage). Additional tournament state transitions must be performed (start_group_stage, finalize_group_stage).
         * @default false
         */
        group_stage_enabled?: boolean;
        group_stage_options?: {
            /**
             * @default round robin
             * @enum {string}
             */
            stage_type?: "round robin" | "single elimination" | "double elimination";
            /** @default 4 */
            group_size?: number;
            /** @default 2 */
            participant_count_to_advance_per_group?: number;
            /**
             * @description Round robin format only, where 1 = single round robin, 2 = double round robin, 3 = triple round robin
             * @default 1
             */
            rr_iterations?: number;
            /**
             * @description Round robin format only, determines the primary ranking stat.
             * @default
             * @enum {string}
             */
            ranked_by?:
            | ""
            | "match wins"
            | "game wins"
            | "game win percentage"
            | "points scored"
            | "points difference"
            | "custom";
            /**
             * Format: float
             * @description For 'custom' ranked by round robin group stage
             * @default 1
             */
            rr_pts_for_match_win?: number;
            /**
             * Format: float
             * @description For 'custom' ranked by round robin group stage
             * @default 0.5
             */
            rr_pts_for_match_tie?: number;
            /**
             * Format: float
             * @description For 'custom' ranked by round robin group stage
             * @default 0
             */
            rr_pts_for_game_win?: number;
            /**
             * Format: float
             * @description For 'custom' ranked by round robin group stage
             * @default 0
             */
            rr_pts_for_game_tie?: number;
            /**
             * @description Double elimination only - starts the bottom half of seeds in the losers bracket
             * @default false
             */
            split_participants?: boolean;
        };
        double_elimination_options?: {
            /**
             * @description Double elimination only - starts the bottom half of seeds in the losers bracket
             * @default false
             */
            split_participants?: boolean;
            /**
             * @description When blank, the losers bracket winner has to beat the winners bracket winner twice.
             * @default
             * @enum {string}
             */
            grand_finals_modifier?: "" | "skip" | "single match";
        };
        round_robin_options?: {
            /** @default 2 */
            iterations?: number;
            /**
             * @default
             * @enum {string}
             */
            ranking?:
            | ""
            | "match wins"
            | "game wins"
            | "game win percentage"
            | "points scored"
            | "points difference"
            | "custom";
            /**
             * Format: float
             * @default 1
             */
            pts_for_game_win?: number;
            /**
             * Format: float
             * @default 0
             */
            pts_for_game_tie?: number;
            /**
             * Format: float
             * @default 1
             */
            pts_for_match_win?: number;
            /**
             * Format: float
             * @default 0.5
             */
            pts_for_match_tie?: number;
        };
        swiss_options?: {
            /** @default 2 */
            rounds?: number;
            /**
             * Format: float
             * @default 1
             */
            pts_for_game_win?: number;
            /**
             * Format: float
             * @default 0
             */
            pts_for_game_tie?: number;
            /**
             * Format: float
             * @default 1
             */
            pts_for_match_win?: number;
            /**
             * Format: float
             * @default 0.5
             */
            pts_for_match_tie?: number;
        };
        free_for_all_options?: {
            /** @default 4 */
            max_participants?: number;
        };
    };
    TournamentStateInput: {
        data?: {
            /** @default TournamentState */
            type?: string;
            attributes?: {
                /** @enum {string} */
                state?:
                | "process_checkin"
                | "abort_checkin"
                | "start_group_stage"
                | "finalize_group_stage"
                | "reset_group_stage"
                | "start"
                | "finalize"
                | "reset"
                | "open_predictions";
            };
        };
    };
    CommunityModel: {
        /** @default 101 */
        id?: string;
        /** @default Community */
        type?: string;
        attributes?: definitions["Community"];
    };
    Community: {
        /** @default nerdfest */
        permalink?: string;
        /** @default nerdfest */
        subdomain?: string;
        /** @default nerdfest */
        identifier?: string;
        /** @default Nerdfest PH */
        name?: string;
        /** @default Everyone should go to Nerdfest. Thank you. */
        description?: string;
        timestamps?: {
            /** @default 2023-04-21T14:29:06.374Z */
            created_at?: string;
            /** @default 2023-04-21T14:31:45.981Z */
            updated_at?: unknown;
        };
    };
    MatchModel: {
        /** @default 8008135 */
        id?: string;
        /** @default match */
        type?: string;
        attributes?: definitions["MatchOutput"];
    };
    MatchInput: {
        data?: {
            /** @default Match */
            type?: string;
            attributes?: {
                match?: definitions["Match"][];
                /**
                 * @description To mark the match complete as a tie, set this to true and ensure 'advancing' is false for reported scores.
                 * @default false
                 */
                tie?: boolean;
            };
        };
    };
    MatchOutput: {
        /**
         * @default complete
         * @enum {string}
         */
        state?: "pending" | "open" | "complete";
        /** @default 1 */
        round?: number;
        /** @default A */
        identifier?: string;
        /** @default 1 */
        suggested_play_order?: number;
        /** @default 2 - 0 */
        scores?: string;
        /**
         * @default [
         *   [
         *     3,
         *     1
         *   ],
         *   [
         *     4,
         *     2
         *   ]
         * ]
         */
        score_in_sets?: { [key: string]: unknown };
        /**
         * @default [
         *   {
         *     "participant_id": 355,
         *     "scores": [
         *       3,
         *       4
         *     ]
         *   },
         *   {
         *     "participant_id": 354,
         *     "scores": [
         *       1,
         *       2
         *     ]
         *   }
         * ]
         */
        points_by_participant?: { [key: string]: unknown };
        timestamps?: {
            /** @default 2023-04-21T14:29:06.374Z */
            created_at?: string;
            /** @default 2023-04-21T14:31:45.981Z */
            updated_at?: unknown;
        };
        /**
         * @description The participant ID of the winner
         * @default 355
         */
        winner_id?: number;
        relationships?: {
            player1?: {
                data?: {
                    /** @default 355 */
                    id?: string;
                    /** @default participant */
                    type?: string;
                };
            };
            player2?: {
                data?: {
                    /** @default 354 */
                    id?: string;
                    /** @default participant */
                    type?: string;
                };
            };
        };
    };
    Match: {
        /** @default 76 */
        participant_id: string;
        /**
         * @description Comma-separated scores for this participant_id. E.g. if participant ID 76 won 4-1, 2-4, 4-0, the value should be '4,2,4' (the other player's value should be '1,4,0'). This format may seem odd, but it scales to support 3+ participants per match in Free For All.
         * @default 4,2,4
         */
        score_set: string;
        /** @default 1 */
        rank?: number;
        /** @default false */
        advancing?: boolean;
    };
    MatchStateInput: {
        data?: {
            /** @default MatchState */
            type?: string;
            attributes?: {
                /** @enum {string} */
                state?: "reopen" | "mark_as_underway" | "unmark_as_underway";
            };
        };
    };
    ErrorModel: {
        errors?: {
            /** @default This is an error message */
            detail?: string;
            /** @default HTTP error code */
            status?: number;
            source?: {
                /** @default Where did this error occur */
                pointer?: string;
            };
        };
    };
    UserModel: {
        /** @default 321 */
        id?: string;
        /** @default user */
        type?: string;
        attributes?: definitions["User"];
    };
    User: {
        /** @default hello@challonge.com */
        email?: string;
        /** @default APIUser */
        username?: string;
        /** @default https://s3.amazonaws.com/challonge_app/users/images/003/004/005/original/Decoy_Duck_w__background.png */
        image_url?: string;
    };
    ElapsedTimeBulkInput: {
        /** @default BulkElapsedTime */
        type?: string;
        attributes?: {
            elapsed_times?: definitions["ElapsedTimeWithID"][];
        };
    };
    ElapsedTimeWithID: {
        /** @default 1 */
        elapsedTimeId: number;
        /** @default 1000 */
        time: number;
        /** @default 0 */
        points: number;
        /** @default 1 */
        rank?: number;
    };
    ElapsedTimeOutput: {
        /** @default 123456 */
        id?: string;
        /** @default Elapsed Time */
        type?: string;
        attributes?: {
            /** @default 1000 */
            elapsedTime?: number;
            /** @default 0 */
            points?: number;
            /** @default 1 */
            rank?: number;
            /** @default 00:00:001.001 */
            formattedTime?: string;
            timestamps?: definitions["Timestamps"];
        };
        relationships?: {
            participant?: {
                data?: {
                    /** @default 45 */
                    id?: string;
                    /** @default participant */
                    type?: string;
                };
                links?: {
                    /** @default https://api.challonge.com/V2_1/tournament//participants/.json */
                    related?: string;
                };
            };
        };
        links?: {
            /** @default https://api.challonge.com/races//rounds//elapsed_times.json */
            self?: string;
        };
    };
    ElaspedTimeInput: {
        /** @default ElaspedTime */
        type?: string;
        attributes?: {
            /** @default 1000 */
            elapsedTime: number;
            /** @default 0 */
            points: number;
            /** @default 1 */
            rank?: number;
        };
    };
    Timestamps: {
        /** Format: date_time */
        startsAt?: string;
        /** Format: date_time */
        createdAt?: string;
        /** Format: date_time */
        updatedAt?: string;
        /** Format: date_time */
        completedAt?: string;
    };
    RelationshipLink: {
        links?: {
            /** @default https://api.challonge.com////.json */
            related?: string;
            meta?: {
                /** @default 0 */
                count?: number;
            };
        };
    };
    RoundOutput: {
        /** @default 8008135 */
        id?: string;
        /** @default RoundOutput */
        type?: string;
        attributes?: {
            /** @default 1 */
            round?: number;
            /**
             * @default pending
             * @enum {undefined}
             */
            state?: "pending" | "underway" | "completed";
            timestamps?: definitions["Timestamps"];
        };
        relationships?: {
            participants?: definitions["RelationshipLink"];
            elapsedTimes?: definitions["relationshiplink"];
        };
        links?: {
            /** @default https://api.challonge.com/races/.json */
            self?: string;
        };
    };
    RoundStateInput: {
        data?: {
            /** @default RoundState */
            type?: string;
            attributes?: {
                /** @enum {string} */
                state?: "start" | "finalize" | "reset";
            };
        };
    };
    RacingOutput: {
        /** @default horse_racing_101 */
        id?: string;
        /** @default Race */
        type?: string;
        attributes?: {
            /** @default Horse Racing 101 */
            name?: string;
            /** @default horse_racing_101 */
            url?: string;
            /**
             * @default time trial
             * @enum {string}
             */
            raceType?: "time trial" | "grand prix";
            description?: string;
            private?: boolean;
            currentLap?: {
                /** @default 15 */
                id?: number;
                /** @default 1 */
                number?: number;
            };
            notifications?: {
                /** @default true */
                uponMatchesOpen?: boolean;
                /** @default true */
                uponTournamentEnds?: boolean;
            };
            registrationOptions?: {
                /** @default false */
                openSignup?: boolean;
                signupCap?: number;
            };
            grandPrixOptions?: {
                /** @default 4 */
                rounds?: number;
            };
            timestamps?: definitions["Timestamps"];
        };
        relationships?: {
            rounds?: definitions["RelationshipLink"];
            participants?: definitions["RelationshipLink"];
        };
        links?: {
            /** @default https://api.challonge.com/races/.json */
            self?: string;
        };
    };
    RacingInput: {
        /** @default Race */
        type?: string;
        attributes?: {
            /** @default Horse Racing 101 */
            name: string;
            /** @default horse_racing_101 */
            url: string;
            /**
             * @default time trial
             * @enum {string}
             */
            raceType: "time trial" | "grand prix";
            description?: string;
            private?: boolean;
            /** Format: date_time */
            startsAt?: string;
            notifications?: {
                /** @default true */
                uponMatchesOpen?: boolean;
                /** @default true */
                uponTournamentEnds?: boolean;
            };
            registrationOptions?: {
                /** @default false */
                openSignup?: boolean;
                signupCap?: number;
            };
            grandPrixOptions?: {
                /** @default 4 */
                rounds?: number;
            };
        };
    };
    RacingStateInput: {
        data?: {
            /** @default RaceState */
            type?: string;
            attributes?: {
                /** @enum {string} */
                state?: "start" | "reset" | "end_round";
            };
        };
    };
}

export interface operations {
    /** Returns tournaments based on the api_key given */
    findTournaments: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
                /** State of the Tournament */
                state?: "pending" | "in_progress" | "ended";
                /** Tournament Type (when group stage is enabled, this is for the final stage) */
                type?:
                | "single_elimination"
                | "double_elimination"
                | "round_robin"
                | "swiss"
                | "free_for_all"
                | "time_trail"
                | "grand_prix";
                /** Tournaments created after the date given. Format should be (mm/dd/yyyy) */
                created_after?: string;
                /** Tournaments created before the date given. Format should be (mm/dd/yyyy) */
                created_before?: string;
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Creates a tournament */
    createTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            body: {
                /** Tournament to be created */
                data: definitions["TournamentInput"];
            };
        };
        responses: {
            /** Tournament Response */
            201: {
                schema: definitions["TournamentModel"];
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Gets a tournament */
    showTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a tournament */
    updateTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Tournament Details to be updated */
                data: definitions["TournamentInput"];
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a tournament */
    deleteTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** API Response when the tournament is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 403 Forbidden */
            403: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Changes a tournament's state */
    changeStateTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            body: {
                /** Match's state change */
                data: definitions["MatchStateInput"];
            };
        };
        responses: {
            /** Match Response */
            200: {
                schema: definitions["MatchModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns matches based on the tournament ID given */
    findMatches: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
                /** State of the Matches */
                state?: "pending" | "open" | "complete";
                /** Filter matches by Participant Id */
                participant_id?: string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** Tournament Matches Response */
            200: {
                schema: definitions["MatchModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns a match based on the Match ID given */
    showMatch: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
        };
        responses: {
            /** Tournament Matches Response */
            200: {
                schema: definitions["MatchModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a match with scores */
    updateMatch: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            body: {
                /** Match to be Updated */
                data: definitions["MatchInput"];
            };
        };
        responses: {
            /** Tournament Matches Response */
            200: {
                schema: definitions["MatchModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns participants based on the tournament ID given */
    findParticipants: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Creates a Participant */
    createParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Participant to be created */
                data: definitions["ParticipantInput"];
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Show a Participant */
    showParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the Participant */
                participant_id: string;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a Participant */
    updateParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the Participant */
                participant_id: string;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a Participant */
    deleteParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the Participant */
                participant_id: string;
            };
        };
        responses: {
            /** API Response when the participant is deactivated */
            200: {
                schema: definitions["ParticipantModel"];
            };
            /** API Response when the participant is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Bulk Creates a Participant */
    bulkCreateParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Participants to be created */
                data: definitions["ParticipantBulkInput"];
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Clears all Participants */
    clearAllParticipants: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** API Response when the participants are deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Randomizes the Participant Seeding */
    randomizeParticipants: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns match attachments based on the api_key, Tournament ID and Match ID given */
    findMatchAttachments: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
        };
        responses: {
            /** Match Attachment Response */
            200: {
                schema: definitions["MatchAttachmentModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Creates a Match Attachment */
    createMatchAttachments: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            body: {
                /** Match Attachment to be created */
                data: definitions["MatchAttachmentInput"];
            };
        };
        responses: {
            /** Match Attachment Response */
            201: {
                schema: definitions["MatchAttachmentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a Match Attachment */
    deleteMatchAttachment: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
        };
        responses: {
            /** API Response when the match attachment is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    findRaces: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
        };
        responses: {
            /** Race Response */
            200: {
                schema: {
                    data?: definitions["RacingOutput"][];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    createRace: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            body: {
                /** Race to be created */
                data: definitions["RacingInput"];
            };
        };
        responses: {
            /** Race Response */
            201: {
                schema: {
                    data?: definitions["RacingOutput"];
                };
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Gets a Race */
    showRace: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
        };
        responses: {
            /** Race Response */
            200: {
                schema: {
                    data?: definitions["RacingOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a Race */
    updateRace: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
            body: {
                /** Race Details to be updated */
                data: definitions["RacingInput"];
            };
        };
        responses: {
            /** Race Response */
            200: {
                schema: {
                    data?: definitions["RacingOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a Race */
    deleteRace: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
        };
        responses: {
            /** API Response when the race is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 403 Forbidden */
            403: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Changes a race's state */
    changeStateRace: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
            body: {
                /** Race's state change */
                data: definitions["RacingStateInput"];
            };
        };
        responses: {
            /** Race Response */
            200: {
                schema: {
                    data?: definitions["RacingOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    findRounds: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
            path: {
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
        };
        responses: {
            /** Rounds Response */
            200: {
                schema: {
                    data?: definitions["RoundOutput"][];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    showRound: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the round */
                round_id: string;
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
        };
        responses: {
            /** Race Response */
            200: {
                schema: {
                    data?: definitions["RoundOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    updateRound: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the round */
                round_id: string;
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
            body: {
                /** Round's state change */
                data: definitions["RoundStateInput"];
            };
        };
        responses: {
            /** Match Response */
            200: {
                schema: {
                    data?: definitions["RoundOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    findElapsedTime: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the round */
                round_id: string;
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
        };
        responses: {
            /** Race Times Response */
            200: {
                schema: {
                    data?: definitions["ElapsedTimeOutput"][];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    showElapsedTime: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the round */
                round_id: string;
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
        };
        responses: {
            /** Elapsed Time Response */
            200: {
                schema: {
                    data?: definitions["ElapsedTimeOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    updateElapsedTime: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the round */
                round_id: string;
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
            body: {
                /** Elapsed Time Details to be updated */
                data: definitions["ElapsedTimeInput"];
            };
        };
        responses: {
            /** Elapsed Time Response */
            200: {
                schema: {
                    data?: definitions["ElapsedTimeOutput"];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    bulkUpdateElapsedTime: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the round */
                round_id: string;
                /** ID (recommended) or URL of the Race */
                race_id: string;
            };
            body: {
                /** Elapsed Time Details to be updated */
                data: definitions["ElapsedTimeBulkInput"];
            };
        };
        responses: {
            /** Elapsed Time Response */
            200: {
                schema: {
                    data?: definitions["ElapsedTimeOutput"][];
                };
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns tournaments based on the api_key given */
    findCommunityTournaments: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
                /** State of the Tournament */
                state?: "ended" | "pending" | "in_progress";
                /** Tournament Type */
                type?:
                | "single_elimination"
                | "double_elimination"
                | "round_robin"
                | "swiss"
                | "free_for_all"
                | "time_trail"
                | "grand_prix";
                /** Tournaments created after the date given. Format should be (mm/dd/yyyy) */
                created_after?: string;
                /** Tournaments created before the date given. Format should be (mm/dd/yyyy) */
                created_before?: string;
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Creates a tournament */
    createCommunityTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
            };
            body: {
                /** Tournament to be created */
                data: definitions["TournamentInput"];
            };
        };
        responses: {
            /** Tournament Response */
            201: {
                schema: definitions["TournamentModel"];
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Gets a tournament */
    showCommunityTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a tournament */
    updateCommunityTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Tournament Details to be updated */
                data: definitions["TournamentInput"];
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a tournament */
    deleteCommunityTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** API Response when the tournament is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 403 Forbidden */
            403: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Changes a tournament's state */
    changeStateCommunityTournament: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Tournament's state change */
                data: definitions["TournamentStateInput"];
            };
        };
        responses: {
            /** Tournament Response */
            200: {
                schema: definitions["TournamentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns matches based on the tournament ID given */
    findCommunityMatches: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
                /** State of the Matches */
                state?: "pending" | "open" | "complete";
                /** Filter matches by Participant Id */
                participant_id?: string;
            };
        };
        responses: {
            /** Tournament Matches Response */
            200: {
                schema: definitions["MatchModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns a match based on the Match ID given */
    showCommunityMatch: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
        };
        responses: {
            /** Tournament Matches Response */
            200: {
                schema: definitions["MatchModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a match with scores */
    updateCommunityMatch: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            body: {
                /** Match to be Updated */
                data: definitions["MatchInput"];
            };
        };
        responses: {
            /** Tournament Matches Response */
            200: {
                schema: definitions["MatchModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns participants based on the tournament ID given */
    findCommunityParticipants: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Creates a Participant */
    createCommunityParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Participant to be created */
                data: definitions["ParticipantInput"];
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Show a Participant */
    showCommunityParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the Participant */
                participant_id: string;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Updates a Participant */
    updateCommunityParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the Participant */
                participant_id: string;
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a Participant */
    deleteCommunityParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the Participant */
                participant_id: string;
            };
        };
        responses: {
            /** API Response when the participant is deactivated */
            200: {
                schema: definitions["ParticipantModel"];
            };
            /** API Response when the participant is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 404 Not Found */
            404: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Bulk Creates a Participant */
    bulkCommunityCreateParticipant: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
            body: {
                /** Participants to be created */
                data: definitions["ParticipantBulkInput"];
            };
        };
        responses: {
            /** Participant Response */
            200: {
                schema: definitions["ParticipantModel"][];
            };
            /** 400 Bad Request */
            400: {
                schema: definitions["ErrorModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Clears all Participants */
    clearAllCommunityParticipants: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
            };
        };
        responses: {
            /** API Response when the participants are deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
            /** 422 Unprocessable Entity */
            422: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns match attachments based on the api_key, Tournament ID and Match ID given */
    findCommunityMatchAttachments: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
                /** Used as caching key for future response */
                "If-None-Match"?: string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            query: {
                /** Number of the page */
                page?: number;
                /** Number of collection members per page */
                per_page?: number;
            };
        };
        responses: {
            /** Match Attachment Response */
            200: {
                schema: definitions["MatchAttachmentModel"][];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Creates a Match Attachment */
    createCommunityMatchAttachments: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
            body: {
                /** Match Attachment to be created */
                data: definitions["MatchAttachmentInput"];
            };
        };
        responses: {
            /** Match Attachment Response */
            201: {
                schema: definitions["MatchAttachmentModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Deletes a Match Attachment */
    deleteCommunityMatchAttachment: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
            path: {
                /** ID of the Community */
                community_identifier: string;
                /** ID (recommended) or URL of the Tournament */
                tournament_id: string;
                /** ID of the match */
                match_id: string;
            };
        };
        responses: {
            /** API Response when the match attachment is deleted */
            204: {
                schema: unknown;
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns the user logged in via oAuth, or the API key owner for v1 authentication. */
    findUser: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
        };
        responses: {
            /** User Response */
            200: {
                schema: definitions["UserModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
    /** Returns administered communities by the user. */
    findCommunities: {
        parameters: {
            header: {
                /** Default value for `Content-Type` header */
                "Content-Type": string;
                /** Default value for `Accept` header */
                Accept: string;
                /** Default value for `Authorization-Type` header. If you want to use APIv2's oAuth2 authentication method, use, change this to `v2` */
                "Authorization-Type": string;
            };
        };
        responses: {
            /** Community Response */
            200: {
                schema: definitions["CommunityModel"];
            };
            /** 401 Unauthorized */
            401: {
                schema: definitions["ErrorModel"][];
            };
            /** 406 Not Acceptable */
            406: {
                schema: definitions["ErrorModel"][];
            };
            /** 415 Unsupported Media Type */
            415: {
                schema: definitions["ErrorModel"][];
            };
        };
    };
}

export interface external { }
